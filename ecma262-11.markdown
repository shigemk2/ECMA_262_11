# 12.9 return 文
## 構文

```
ReturnStatement :
	return ;
	return [no LineTerminator here] Expression ;
```

no LineTerminator hereとは **ここに改行を入れてはならない**

ECMAScriptのプログラムは、FunctionBody(関数本体)内に何もない return 文を含む場合、構文上の誤りがあると考えられます。 return文は関数に実行を中断させ、呼び出し元へ値を返す。 Expression が省略されると、戻り値は、undefined(未定義)となる。 それ以外の場合、戻り値は、Expression(式)の値となる。

ReturnExpressionは以下のように評価する。

1. Expressionが、存在しない場合、return (return, undefined, empty)
2. exprRef は、Expressionを評価した結果とする
3. (return, GetValue(exprRef), empty)を返す

### 補足

* 2は、exprRef 定義したものだが、プログラマが実際に値を確認することはできない
* 3の GetValue は、説明のための関数 実際に値を取り出す

# 12.10 with 文
## 構文

```
WithStatement :
	with ( Expression ) Statement
```

with 文は、現在の実行コンテキストのレキシカル環境へ、計算されたオブジェクトのためのオブジェクト環境レコードを追加する。次に、その拡張されたレキシカル環境を使って文を実行する。最後に、元のレキシカル環境を復元する。

withは次のように評価される

1. val は、Expressionを評価した結果とする
2. obj は、 ToObject(GetValue(val)) とする
3. oldEnv は、実行中の実行コンテキストのLexicalEnvironmentとする
4. newEnv は、引数として obj と oldEnv を渡すことによってNewObjectEnvironmentを呼んだ結果とする
5. newEnv の provideThis フラグに true を設定
6. 実行中の実行コンテキストのLexicalEnvironmentに newEnv を設定
7. C は、Statementを評価した結果とするが、評価中に例外が投げられる(スローされる)場合、  V が例外である場合、 C は、 (throw, V, empty)とする(、もし、投げられる(スローされる)例外がない場合のように現在の結果を実行する)
8. 実行中の実行コンテキストのLexicalEnvironmentに oldEnv を設定
9. C を返す

### 補足

* レキシカル環境とは **変数スコープが作られる環境**
* provideThisフラグとは

## 12.10.1 strictモードの制限・制約

strictモードのコードは、WithStatementに含んではならない。 このような文脈におけるWithStatementの出現は、SyntaxErrorとして扱われます。

# 12.11 switch 文
## 構文

```
SwitchStatement :
	switch ( Expression ) CaseBlock

CaseBlock :
	{ CaseClauses(opt) }
	{ CaseClauses(opt) DefaultClause CaseClauses(opt) }

CaseClauses :
	CaseClause
	CaseClauses CaseClause

CaseClause :
	case Expression : StatementListopt

DefaultClause :
	default : StatementListopt
```

### 補足

* 構文が難しすぎです
* CaseClausesで(左)再帰を実現している
* optはoptional 故に省略可能

## 生成規則

```
SwitchStatement : switch ( Expression ) CaseBlock
```

1. exprRefを、Expressionを評価した結果とする
2. Rは、CaseBlockを評価した結果とし、それにGetValue(exprRef)を引数として渡す。
3. R.type が、 breakであり、 R.target が、現在のラベルのセットの中にある場合、(normal, R.value, empty)を返す
4. Rを返す

### 補足

* 1はexprRefの定義
* 2はRの定義(RはたぶんReturn)
* 3 Rはtypeとtargetとvalueというキーを持つタプルのことなのか R = (type, value, target)


## 生成規則

```
CaseBlock : { CaseClauses(opt) }
```

入力パラメータinputを与えられ、そして次のように評価される。

1. V = empty とする
2. A は、ソーステキストの順序におけるCaseClause項目のリストとする
3. searching を true とする
4. searching が trueである間、以下を繰り返す
    1. C を A における次のCaseClauseとする、そのようなCaseClauseがない場合、(normal, V, empty)を返す
    2. clauseSelector を C の評価結果とする
    3. input が === 演算子によって定義されるように clauseSelector と等しければ、
        1. searching に false を設定する
        2. C が、StatementListを持つなら、
            1. C のStatementListを評価し、 R は、 その結果とする
            2. R が、中途完了(an abrupt completion)である場合、R を返す
            3. V = R.value とする
5. 以下を繰り返す
    1. C は、 A にある次のCaseClauseとする、もし、そのようなCaseClauseがない場合、(normal, V, empty)を返す
    2. C が、StatementListを持つ場合、
        1. C のStatementListを評価し、 R は、 その結果とする
        2. R.value が、emptyではない場合、 V = R.valueとする
        3. R が、中途完了である場合、(R.type, V, R.target)を返す

## 生成規則

```
CaseBlock : { CaseClausesopt DefaultClause CaseClausesopt }
```

入力パラメータinputを与えられ、次のように評価される。

1. V = empty とする
2. A を1つめのCaseClausesの、ソーステキスト順序におけるCaseClause項目の一覧とする
3. B を2つめのCaseClausesの、ソーステキスト順序におけるCaseClause項目の一覧とする
4. found は、falseとする
5. CをAにあるCaseClauseとすることを順番に繰り返す
    1. found が、 falseである場合、
        1. clauseSelector は、 C の評価した結果とする
        2. input が、 === 演算子によって定義されるようにclauseSelectorと同等である場合
    1. found が、 trueである場合
        1. C が、StatementListを持つ場合、
            1. C のStatementListを評価し、 R は、 result とする
            2. R.value が、emptyではない場合、 V = R.value とする
            3. Rが中途完了であるなら、(R.type, V, R.target)を返す
6. foundInBをfalseとする
7. foundがfalseならば
    1. foundInBがfalseであり、Bのすべての要素が未処理であるあいだ、以下を繰り返す
        1. CをBにおける次のCaseClauseとする
        2. clauseSelectorをCの評価結果とする
        3. inputが===演算子によって定義されるようにclauseSelectorと等しければ、
            1. foundInBをtrueに設定する
            2. CがStatementListを持つなら、
                1. CのStatementListを評価して、Rをその結果とする
                2. R.valueがemptyでなければ、V = R.valueとする
                3. Rが中途完了であるなら、(R.type, V, R.target)を返す
8. foundInBがfalseであり、DefaaultClauseがStatementListを持つなら、
    1. DefaultClauseのStatementListを評価して、Rをその結果とする
    2. R.valueがemptyでなければ、V = R.valueとする
    3. Rが中途完了であるなら、(R.type, V, R.target)とする
9. 以下を繰り返す(ステップ7.a.iが実行されるなら、このループはBの先頭を開始しないことに留意すべきである)
    1. CをBにおける次のCaseClauseとする。そのようなCaseClauseが存在しなければ、(normal, V, empty)を返す
    2. CがStatementListを持つなら、
        1. CのStatementListを評価して、Rをその結果とする
        2. R.valueがemptyでなければ、V = R.valueとする
        3. Rが中途完了であるなら、(R.type, V, R.target)を返す

## 生成規則

```
CaseClause : case Expression : StatementListopt
```

1. exprRef は、Expressionを評価した結果とする
2. GetValue(exprRef)を返す

# 12.12 ラベル付き文
## 構文

```
LabelledStatement :
Identifier : Statement
```

Statementの前にラベルをつけることができる。ラベルづけした文はラベル付けされたbreak文やcontinue文と同時に使われる場合に限って使われる。ECMAScriptには、 goto 文を持たない。

ECMAScriptプログラムは、それがラベルとして同じIdentifierを持つLabelledStatementによって囲まれたLabelledStatementを含むなら構文的に正しくないと考えられる。これはラベルづけされたぶんの中で、直接的または間接的に入れ子にされるFunctionDeclarationの本体の中に現れるラベルには現れない。



# 12.13 throw 文
## 構文

```
ThrowStatement :
    throw [no LineTerminator here] Expression ;
```

## 生成規則

```
ThrowStatement : throw [no LineTerminator here] Expression ;
```

改行禁止で、次のように評価される

1. exprRef は、Expressionを評価した結果とする
2. (throw, GetValue(exprRef), empty)を返す

# 12.14 try 文
## 構文

```
TryStatement :
    try Block Catch
    try Block Finally
    try Block Catch Finally

Catch :
    catch ( Identifier ) Block

Finally :
    finally Block
```

try文は、実行時エラーまたはthrow文のような、例外的な状況が発生しうるコードの固まりを取り囲む。catch節は例外対応のコードを規定する。catch節が例外を捉えると、そのIdentifierはその例外に束縛される。

## 生成規則

```
TryStatement : try Block Catch
```

以下のように評価される。

1. B は、Blockを評価した結果とする
2. B.type が、throwではない場合、Bを返す
3. 引数 B.value を伴う Catch を評価した結果を返す

## 生成規則

```
TryStatement : try Block Finally
```

以下のように評価される。

1. B は、Blockを評価した結果とする
2. F は、Finallyを評価した結果とする
3. F.type が、normalである場合、 Bを返す
4. F を返す

## 生成規則

```
TryStatement : try Block Catch Finally
```

1. B は、Blockを評価した結果とする
2. B.type が、 throwである場合、
    * C は、引数 B.valueを伴う Catch を評価した結果とする
3.それ以外の場合、 B.type が、throwではない場合、
    * C は、 Bとする
4. F は、Finallyを評価した結果とする
5. F.type が、normalである場合、Cを返す
6. F を返す

## 生成規則

```
Catch : catch ( Identifier ) Block
```

1. C は、この生成規則に渡される引数とする
2. oldEnv は、実行中の実行コンテキストのLexicalEnvironmentとする
3. catchEnv は、引数として oldEnv を渡すことによってNewDeclarativeEnvironmentを呼んだ結果とする
4. catchEnvのCreateMutableBinding具象メソッドをString値Identifierを引数として呼び出す
5. catchEnvのSetMutableBindig具象メソッドをIdentifier、C、それとfalseを引数として呼び出す。最後の引数は、この場合、重要ではないことを留意する
6. 実行中の実行コンテキストのLexicalEnvironmentをcatchEnvに設定
7. B は、Blockを評価した結果とする
8. 実行中の実行コンテキストのLexicalEnvironmentをoldEnvに設定
9. B を返す

## 生成規則

```
Finally: finally Block
```

1. Blockを評価した結果を返す

## 12.14.1 strictモードの制限事項

Catch を伴うTryStatementがstrictコード内で現れたり、 Catch 生成規則の識別子が、"eval" または、 "arguments"のいずれかである場合には、SyntaxErrorです。

```
Unexpected eval or arguments in strict mode
```

### 補足

* NewDeclarativeEnvironmentとは

# 12.15 debugger 文

```
DebuggerStatement :
    debugger ;
```

## 生成規則

```
DebuggerStatement : debugger ;
```

1. 実装定義のデバッグ機能が利用可能であり有効化されているなら
    1. 実装定義のデバッグ動作を実行
    2. result は、実装定義の Completion 値とする
2. それ以外の場合
    1. result は、(normal, empty, empty)とする
3. resultを返す

### 補足

* Completionとは
